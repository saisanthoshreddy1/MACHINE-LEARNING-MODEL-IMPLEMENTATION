# import required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import joblib

# load dataset
df = pd.read_csv("email.csv")  # file must contain 'text' and 'label' columns

# separate features and labels
X = df['text']
y = df['label']

# convert text to numeric data
vectorizer = CountVectorizer()
X_vectorized = vectorizer.fit_transform(X)

# split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42)

# create and train the model
model = MultinomialNB()
model.fit(X_train, y_train)

# make predictions
y_pred = model.predict(X_test)

# evaluate model
print("accuracy:", accuracy_score(y_test, y_pred))
print("\nclassification report:\n", classification_report(y_test, y_pred))

# plot confusion matrix
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Greens")
plt.xlabel("predicted")
plt.ylabel("actual")
plt.title("confusion matrix")
plt.show()

# save the model and vectorizer
joblib.dump(model, 'spam_classifier.joblib')
joblib.dump(vectorizer, 'vectorizer.joblib')

# take user input and predict
user_input = input("enter the email text: ")
input_vector = vectorizer.transform([user_input])
prediction = model.predict(input_vector)

# print result
if prediction[0] == 1:
    print("this email is classified as spam.")
else:
    print("this email is not spam.")
